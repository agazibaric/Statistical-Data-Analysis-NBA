class(1)
as.factor(2)
factor(2,3,4)
p2 = factor("asd", "asd")
p2
class(p2)
p3 = factor(c("asd","sffk"))
p3
class(p3)
p3[1]
p3[0]
p3[3]
remove(p3)
num.vector = c(21,42,21,10,21)
pb = factor(c)
pb
levels(pb)
pb = as.factor(c)
pb = as.factor(pb)
num.vector = c(21,42,21,10,21)
pb = as.factor(num.vector)
pb
pb = factor(num.vector)
pb
mean(pb)
pbr = factor(num.vector, labels=c("a", "b", "c"))
pbr
pbr
levels(pbr)
sls
iris
iris3
# labele se dodjeljuju po redu jedinstvenim vrijednostima iz num.vektor (koje se prvo sortiraju) -- u ovom slucaju 1, 2, 3 --> "PLAVA","CRNA","SMEDJA"
iris
iris
hist(iris$Petal.Length)
hist(iris$Petal.Length, col = "blue")
hist(iris$Petal.Length, col = "red")
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Length, col = "green")
box(iris$Sepal.Length)
plot(iris$Species)
plot(iris$Species, col = "red")
count.fields(iris$Species)
count.fields(iris)
plot(iris$Sepal.Length, col = "orange")
nnfnfnfnnfnfnfnnfnfnfnfnfnfnfnfnfnfnfnfnfnnfnfnf
# 1.
# Uvijek je dobro prije nego ucitate podatke iz neke datoteke otvoriti tu datoteku
# i pogledati kako su tocno podaci pohranjeni u njoj
etr = scan("head_sizes_of_Etruscans.txt")
head(etr)
# 2.
n_etr = length(etr)
# 3.
# Granice postavljamo sami tako da se pomaknemo za 0.5 na lijevo od najmanjeg podatka
# iz uzorka i za 0.5 na desno od najveceg podatka iz uzorka te zatim podijelimo taj
# interval na 10 ekvidistantnih intervala (pomocu 11 tocaka)
hist(etr, breaks = seq(from = min(etr) - 0.5, to = max(etr) + 0.5, length = 11))
hist(etr, breaks = seq(from = min(etr) - 0.5, to = max(etr) + 0.5, length = 11))
# 3.
# Granice postavljamo sami tako da se pomaknemo za 0.5 na lijevo od najmanjeg podatka
# iz uzorka i za 0.5 na desno od najveceg podatka iz uzorka te zatim podijelimo taj
# interval na 10 ekvidistantnih intervala (pomocu 11 tocaka)
hist(etr, breaks = seq(from = min(etr), to = max(etr), length = 11))
hist(etr, breaks = seq(from = min(etr), to = max(etr), length = 11))
hist(etr, breaks = seq(from = min(etr) - 0.5, to = max(etr) + 0.5, length = 11))
hist(etr, breaks = seq(from = min(etr), to = max(etr), length = 11))
# 3.
# Granice postavljamo sami tako da se pomaknemo za 0.5 na lijevo od najmanjeg podatka
# iz uzorka i za 0.5 na desno od najveceg podatka iz uzorka te zatim podijelimo taj
# interval na 10 ekvidistantnih intervala (pomocu 11 tocaka)
hist(etr, breaks = seq(from = min(etr) - 0.5, to = max(etr) + 0.5, length = 11))
hist(etr, breaks = seq(from = min(etr) - 0.5, to = max(etr) + 0.5, length = 11))
qqplot(etr)
qqnorm(etr)
qqline(etr)
# 5.
x_potez_etr = mean(etr)
sd_etr = sd(etr)
# 6. na ruke
alfa = 0.05
t_alfa_pola = qt(1 - alfa/2, df = n_etr - 1)
dg = x_potez_etr - t_alfa_pola * (sd_etr / sqrt(n_etr))
gg = x_potez_etr + t_alfa_pola * (sd_etr / sqrt(n_etr))
c(dg, gg)
# 7. na ruke
mu_0_etr = 140
t_etr = ((x_potez_etr - mu_0_etr) / sd_etr) * sqrt(n_etr)
pv = 1 - pt(t_etr, df = n_etr - 1)
pv
x_potez_etr
sd_etr
help("t.test")
t.test(x = etr, alternative = "greater", mu = 140, conf.level = 0.95)
pv
t.test(etr, mu = mu_0_etr, alt = "greater")
mu_0_etr
# 6. pomocu gotovih procedura
t.test(etr, alt = "two.sided", conf.level = 0.95)
tal = scan("head_sizes_of_Italians.txt")
n_tal = length(tal)
x_potez_tal = mean(tal)
sd_tal = sd(tal)
qqnorm(tal)
qqline(tal)
t.test(tal, mu = 132, alternative = "two.sided", conf.level = 0.99)
# 1. pomocu gotovih proceudra
#install.packages("TeachingDemos")
require(TeachingDemos)
install.packages("TeachingDemos")
library("TeachingDemos")
sigma.test(etr, sigmasq = 50, alt = "two.sided")
sigma.test(tal, sigmasq = 50, alt = "less", conf.level = 0.99)
var.test(etr, tal)
# 2. na ruke
var_etr = var(etr)
var_tal = var(tal)
f = var_etr / var_tal
pv = 2 * min(pf(f, df1 = n_etr - 1, df2 = n_tal - 1),
1 - pf(f, df1 = n_etr - 1, df2 = n_tal - 1))
pv
# 1.
boxplot(etr, tal)
t.test(etr, tal, alt = "greater", var.equal = TRUE)
# 1.
require(xlsx)
install.packages("xlsx")
require("xlsx")
head(kikiriki)
kikiriki = read.xlsx("Kikiriki.xlsx", sheetIndex = 1, startRow = 1, header = TRUE)
head(kikiriki)
hist(kikiriki$uzorak1)
hist(kikiriki$uzorak2)
# 3.
boxplot(kikiriki$uzorak1, kikiriki$uzorak2)
t.test(kikiriki$uzorak1, kikiriki$uzorak2, alt = "less")
# 1.
dir()
podaci = read.table("100m_data.txt", header = TRUE)
head(podaci)
# 2.
hist(podaci$Before)
hist(podaci$After)
# 2.
hist(podaci$Before)
hist(podaci$After)
# 3. pomocu 'paired = TRUE'
t.test(podaci$Before, podaci$After, paired = TRUE, alt = "greater")
# 3. bez 'paired = TRUE'
pom = podaci$Before - podaci$After
t.test(pom, mu = 0, alt = "greater")
# ucitavanje podataka u df i pregled ucitanih podataka
df = read.table("credit.csv",sep=";",header = TRUE)
summary(df)
class(df$gender)
class(df$marriage)
levels(df)
names(df)
head(df)
# pretvaranje ucitanih integera u factor varijable
df$default = factor(df$default,labels=c("solvent","delinquent"))
head(df)
df$marriage = factor(df$marriage,labels=c("married","single","other"))
head(df)
# buduci da su razine 5 i 6 obje definirane kao "unknown", ovdje icemo ih odvojiti u unknown1 i unknown2 pa naknadno spojiti koristeci levels()
df$education = factor(df$education,labels=c("graduate school","university", "high school", "other", "unknown1", "unknown2"))
head(df)
levels(df$education)
levels(df$education) = c("graduate school","university", "high school", "other", "unknown", "unknown")
levels(df$education)
summary(df)
# kruzni dijagram
pie(table(df$education))
# stupcasti dijagram
barplot(table(df$education),cex.names=0.8)
table(df$education)
# stupcasti dijagram
barplot(table(df$education),cex.names=0.2)
# stupcasti dijagram
barplot(table(df$education),cex.names=0.8)
# stupcasti dijagram
barplot(table(df$education))
length(df)
df
nrows(df)
nrow(df)
# broj eksperimenata
n = length(df$default)
n
# broj "uspjeha"
x = length(which(df$default=="delinquent"))
# egzaktni binomni test o jednoj proporciji s dvostranom alternativom
binom.test(x,n,p=0.21,alternative="t")
x
n
x / n
# broj eksperimenata iz oba uzorka
n = c(length(df$default[df$gender=="f"]),length(df$default[df$gender=="m"]))
n
# broj uspjeha iz oba uzorka
x = c(length(which(df$default[df$gender=="f"]=="delinquent")),length(which(df$default[df$gender=="m"]=="delinquent")))
x
# test o dvije proporcije (hi-kvadrat umjesto z-testa) - bez tzv. Yatesove korekcije
prop.test(x,n,alternative="t",correct="FALSE")
# kontingencijska tablica za razinu edukacije i default klijenta
tbl = table(df$education,df$default)
print(tbl)
head(df)
# tablici je moguce dodati i sume redaka i stupaca
print(addmargins(tbl))
# tablicu je moguce prikazati i pomocu relativnih frekvencija
print(prop.table(tbl))
# kontingencijska tablica
tbl = table(df$education,df$default)
# hi-kvadrat test nezavisnosti bez Yatesove korekcije
chisq.test(tbl,correct=F)
tbl
# kontingencijska tablica
tbl = table(df$gender,df$default)
print(tbl)
# fisher-irwinov egzaktni test s jednostranom alternativom
fisher.test(tbl,alternative = "g")
setwd("C:/Users/ante1/Documents/Development/R/Projekt/NBA")
playersData <- read.csv(file="./Data/nba-players-stats/Players.csv", header=TRUE, sep=",")
player_data <- read.csv(file="./Data/nba-players-stats/player_data.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="./Data/nba-players-stats/Seasons_Stats.csv", header=TRUE, sep=",")
q = quantile(playersData$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(playersData$height, na.rm = TRUE)
upperLimit = q[3] + 1.5 * i
lowerLimit = q[1] - 1.5 * i
tallPlayers = playersData[playersData$height > upperLimit, ]
shortPlayers = playersData[playersData$height < lowerLimit, ]
tallPlayers
shortPathName()
shortPlayers
head(player_data)
head(playersData)
head(seasonsStats)
boxplot(player_data$height)
q
i
player_data$height
playersData$height
boxplot(playersData$height)
player = player_data[player_data$name == "Ivica Zubax"]
player
player = player_data[player_data$name == "Ivica Zubac"]
player = player_data[player_data$name == "Ivica Zubac", ]
player
player = player_data[player_data$name == "Ivica Zubac", position]
player = player_data[player_data$name == "Ivica Zubac", player_data$position]
player
player = player_data[player_data$name == "Ivica Zubac", ]
player
player = player_data[player_data$name == "Ivica Zubac", names(player_data)]
player
player = player_data[player_data$name == "Ivica Zubac", names(player_data) != height]
player = player_data[player_data$name == "Ivica Zubac", names(player_data) != "height"]
player
player = player_data[player_data$position = "C", ]
player = player_data[player_data$position == "C", ]
player
player = player_data[player_data$position == "C" & player_data$height > "7-0", ]
player = player_data[player_data$position == "C" & player_data$height > "7", ]
h = player$position
h
asInch("7-2")
asInch("7-2")
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit("-", height)
print(tokens)
return(0)
}
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
print(tokens)
return(0)
}
asInch("7-2")
asInch <- function(height) {
tokens <- as.numeric(strsplit(height, "-"))
return(12*tokens[0] + tokens[1])
}
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
return(12*as.numeric(tokens[0]) + as.numeric(tokens[1]))
}
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
print(tokens)
return(12*as.numeric(tokens[0]) + as.numeric(tokens[1]))
}
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
print(class(tokens))
return(12*as.numeric(tokens[0]) + as.numeric(tokens[1]))
}
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
print(class(tokens[0]))
return(12*as.numeric(tokens[0]) + as.numeric(tokens[1]))
}
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
print(class(tokens[0][0]))
return(12*as.numeric(tokens[0]) + as.numeric(tokens[1]))
}
asInch("7-2")
asInch <- function(height) {
tokens <- as.numeric(sapply(strsplit(height, "-")))
return(12*tokens[0] + tokens[1])
}
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
return(12*as.numeric(sapply(tokens[0])) + as.numeric(sapply(tokens[1])))
}
asInch("7-2")
asInch("7-2")
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
return(12*as.numeric(sapply(tokens[0])) + as.numeric(sapply(tokens[1])))
}
asInch <- function(height) {
tokens <- strsplit(height, "-")
return(12*as.numeric(sapply(tokens[0])) + as.numeric(sapply(tokens[1])))
}
asInch("7-2")
asInch <- function(height) {
tokens <- strsplit(height, "-")
return(12*as.numeric(tokens[0]) + as.numeric(tokens[1]))
}
asInch("7-2")
asInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(height, "-")))
return(12*as.numeric(tokens[0]) + as.numeric(tokens[1]))
}
asInch("7-2")
asInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(height, "-")))
return(12*tokens[0] + tokens[1])
}
asInch("7-2")
asInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(height, "-")))
print (tokens)
return(12*tokens[0] + tokens[1])
}
asInch("7-2")
asInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(height, "-")))
return(tokens[0])
}
asInch("7-2")
h = levels(player$position)
h
player_data$height
a = player_data$height[0]
h = levels(player$position)
a
a = player_data$height
a
tokens <- as.numeric(unlist(strsplit(height, "-")))
a = player_data$height[1]
a
tokens <- as.numeric(unlist(strsplit(a, "-")))
tokens <- as.numeric(unlist(strsplit(as.character(a), "-")))
tokens
tokens[1]
class(tokens[1])
asInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(height, "-")))
return(12 * tokens[1] + tokens[2])
}
asInch("7-0")
h = levels(player$position)
h
asInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(height, "-")))
return(12 * tokens[1] + tokens[2])
}
player = player_data[player_data$position == "C" & asInch(as.character(player_data$height)) > 7, ]
player
player = player_data[player_data$position == "C" & asInch(as.character(player_data$height)) > 84, ]
player
as = asInch(as.character(player_data$height))
as
head(seasonsStats)
asInch <- function(height) {
if (is.vector(height)) {
result <- numeric()
for (i in 1:length(height)) {
result <- c(result, asInch(height[i]))
}
return(result)
}
tokens <- as.numeric(unlist(strsplit(height, "-")))
return(12 * tokens[1] + tokens[2])
}
tokens <- as.numeric(unlist(strsplit(as.character(a), "-")))
as = asInch(as.character(player_data$height))
h = levels(player$position)
as
as = asInch(as.character(player_data$height))
as
class(as.character(player_data$height))
print(as.character(player_data$height))
chars = as.character(player_data$height)
chars
l = asInch(chars)
l
l = asInch(chars)
l
chars = as.character(player_data$height)
l = asInch(chars)
l
chars = as.character(player_data$height)
result <- numeric()
for (i in 1:length(chars)) {
result <- c(result, asInch(chars[i]))
}
player = player_data[player_data$position == "C" , ]
player
player = player_data[player_data$position == "PG" , ]
player
player = player_data[player_data$position == "P" , ]
player
guards = player_data[player_data$position == "G" , ]
guards = player_data[player_data$position == "F-G" , ]
fguards = player_data[player_data$position == "F-G" , ]
guards = player_data[player_data$position == "G" , ]
fguards = player_data[player_data$position == "F-G" , ]
guards = player_data[player_data$position == "G" , ]
fguards
guards
asInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(height, "-")))
return(12 * tokens[1] + tokens[2])
}
asInch("7-0")
fromFactorToInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(as.character(height), "-")))
return(12 * tokens[1] + tokens[2])
}
h = guards$height
h
fromFactorToInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(as.character(height), "-")))
return(12 * tokens[1] + tokens[2])
}
i = fromFactorToInch(h)
i
class(h)
i = Vectorize(fromFactorToInch(h))
i = Vectorize(fromFactorToInch)
a = i(h)
a
fromFactorToInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(as.character(height), "-")))
return(12 * tokens[1] + tokens[2])
}
i = Vectorize(fromFactorToInch)
guards = player_data[player_data$position == "G" , ]
fguards = player_data[player_data$position == "F-G" , ]
help(t.test)
t.test(i(guards$height), i(fguards$height), alt = "two.sided", var.equal = TRUE)
mean(i(guards$height))
mean(i(fguards$height))
fguards = player_data[player_data$position == "F-G" & ii(player_data$height), ]
ii = Vectorize(fromFactorToInch)
fguards = player_data[player_data$position == "F-G" & ii(player_data$height), ]
fguards
fguards = player_data[player_data$position == "F-G" & ii(player_data$height) > 84, ]
fguards
ii = Vectorize(fromFactorToInch)
fromFactorToInch <- function(height) {
tokens <- as.numeric(unlist(strsplit(as.character(height), "-")))
return(12 * tokens[1] + tokens[2])
}
ii = Vectorize(fromFactorToInch)
fguards = player_data[player_data$position == "F-G" & ii(player_data$height) > 84, ]
fguards
fguards = player_data[player_data$position == "C" & ii(player_data$height) > 84, ]
fguards
fguards = player_data[player_data$position == "F-G" & ii(player_data$height) > 84, ]
fguards = player_data[player_data$position == "F-G" & ii(player_data$height) > 72, ]
boxplot(fguards$height)
boxplot(ii(fguards$height))
boxplot(fromFactorToInch(fguards$height))
fguards = player_data[player_data$position == "F-G" & fromFactorToInch(player_data$height) > 72, ]
fguards
boxplot(fromFactorToInch(fguards$height))
fromFactorToInch <- Vectorize(function(height) {
tokens <- as.numeric(unlist(strsplit(as.character(height), "-")))
return(12 * tokens[1] + tokens[2])
})
boxplot(fromFactorToInch(fguards$height))
t.test(fromFactorToInch(guards$height), fromFactorToInch(fguards$height), alt = "two.sided", var.equal = TRUE)
t.test(fromFactorToInch(guards$height), fromFactorToInch(fguards$height), alt = "greater", var.equal = TRUE)
t.test(fromFactorToInch(guards$height), fromFactorToInch(fguards$height), alt = "less", var.equal = TRUE)
t.test(fromFactorToInch(guards$height), fromFactorToInch(fguards$height), alt = "two.sided", var.equal = TRUE)
var(fromFactorToInch(guards$height))
var(fromFactorToInch(fguards$height))
