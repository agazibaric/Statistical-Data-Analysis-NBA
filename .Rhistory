nss <- ss[ss$Player == name, ]
maxCurrent <- nss[nss$PTS / nss$G == max(nss$PTS / nss$G, na.rm=TRUE), ]
df <- rbind(df, maxCurrent)
}
df$ppg <- df$PTS / df$G
barplot(prop.table(table(players$position)))
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
other = setdiff(players2, europeans)
t.test(europeans$height, other$height, alt = "two.sided")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
other = setdiff(players2, europeans)
t.test(europeans$height, other$height, alt="greater")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
other = setdiff(players2, europeans)
t.test(europeans$height, other$height, alt="two.sided")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
other = setdiff(players2, europeans)
t.test(europeans$height, other$height, alt="two.sided")
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
# Tallest and smallest players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(players$height, na.rm = TRUE)
upperLimit = q[3] + 1.5 * i
lowerLimit = q[1] - 1.5 * i
tallPlayers = players[players$height > upperLimit, ]
shortPlayers = players[players$height < lowerLimit, ]
# Tallest and smallest players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(players$height, na.rm = TRUE)
upperLimit = q[3] + 1.5 * i
lowerLimit = q[1] - 1.5 * i
tallPlayers = players[players$height > upperLimit, ]
shortPlayers = players[players$height < lowerLimit, ]
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "C" | players$position == "C", ]
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F" | players$position == "F", ]
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
centers = players[players$position == "C"]
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
centers = players[players$position == "C", ]
mean(guards$height)
mean(fguards$height)
mean(centers$height)
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
other = setdiff(players2, europeans)
t.test(europeans$height, other$height, alt="two.sided")
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
playerFGA = c(sum(europeanStats$FGA), sum(otherStats$FGA))
playerFG = c(sum(europeanStats$FG), sum(otherStats$FG))
prop.test(playerFG, playerFGA, alternative="t", correct="FALSE")
cor(seasonsStats$X3P., seasonsStats$X3PA, method="pearson")
cor(seasonsStats$X3P.[!is.na(seasonsStats$X3P.) & !is.na(seasonsStats$X3PA)], seasonsStats$X3PA[!is.na(seasonsStats$X3P.) & !is.na(seasonsStats$X3PA)], method="pearson")
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age])
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
avg <- rep(0, length(ages))
for (i in 1:length(ages)) {
age = ages[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age])
avg[i] <- sum(seasonsStats$FG[!is.na(seasonsStats$Age) & seasonsStats$Age == age]) / sum(seasonsStats$FGA[!is.na(seasonsStats$Age) & seasonsStats$Age == age])
}
values <- values / length(unique(ss$Year))
barplot(setNames(values, ages))
barplot(setNames(avg, ages))
years <- 1979:2019
threes <- rep(0, length(years))
for (i in 1:length(years)) {
threes[i] <- sum(teams$X3PA[teams$Year == years[i]])
}
lm.r <- lm(threes ~ years)
plot(years, threes, cex=0.5, xlab="Godina", ylab="3PA", col="blue")
abline(lm.r, col="red")
# barplot(setNames(values, years))
qqnorm(rstandard(lm.r))
qqline(rstandard(lm.r))
years <- 1979:2019
threes <- rep(0, length(years))
for (i in 1:length(years)) {
threes[i] <- sum(teams$X3PA[teams$Year == years[i]])
}
lm.r <- lm(threes ~ years)
plot(years, threes, cex=0.5, xlab="Godina", ylab="3PA", col="blue")
abline(lm.r, col="red")
qqnorm(rstandard(lm.r))
qqline(rstandard(lm.r))
years <- 1979:2019
correlationsPearson <- rep(0, length(years))
correlationsSpearman <- rep(0, length(years))
for (i in 1:length(years)) {
yearStats <- teams[teams$Year == years[i], ]
correlationsPearson[i] <- cor(yearStats$X3P / yearStats$X3PA, yearStats$W, method="pearson")
correlationsSpearman[i] <- cor(yearStats$X3P / yearStats$X3PA, yearStats$W, method="spearman")
}
plot(years, correlationsPearson, cex=0.3, col="blue", xlab="godina", ylab="cor")
lines(years, correlationsPearson, col="blue")
points(years, correlationsSpearman, cex=0.3, col="red")
lines(years, correlationsSpearman, col="red")
years <- 1979:2019
correlationsPearson <- rep(0, length(years))
correlationsSpearman <- rep(0, length(years))
for (i in 1:length(years)) {
yearStats <- teams[teams$Year == years[i], ]
correlationsPearson[i] <- cor(yearStats$X3PA, yearStats$W, method="pearson")
correlationsSpearman[i] <- cor(yearStats$X3PA, yearStats$W, method="spearman")
}
plot(years, correlationsPearson, cex=0.3, col="blue", xlab="godina", ylab="cor")
lines(years, correlationsPearson, col="blue")
points(years, correlationsSpearman, cex=0.3, col="red")
lines(years, correlationsSpearman, col="red")
years <- 1979:2019
correlationsPearson <- rep(0, length(years))
correlationsSpearman <- rep(0, length(years))
for (i in 1:length(years)) {
yearStats <- teams[teams$Year == years[i], ]
correlationsPearson[i] <- cor(yearStats$X3P / yearStats$X3PA, yearStats$W, method="pearson")
correlationsSpearman[i] <- cor(yearStats$X3P / yearStats$X3PA, yearStats$W, method="spearman")
}
plot(years, correlationsPearson, cex=0.3, col="blue", xlab="godina", ylab="cor")
lines(years, correlationsPearson, col="blue")
points(years, correlationsSpearman, cex=0.3, col="red")
lines(years, correlationsSpearman, col="red")
years <- 1979:2019
minPlayoff <- rep(0, length(years))
maxWins <- rep(0, length(years))
minWins <- rep(0, length(years))
for (i in 1:length(years)) {
minPlayoff[i] <- min(teams$W[teams$Year == years[i] & teams$PO])
maxWins[i] <- max(teams$W[teams$Year == years[i]])
minWins[i] <- min(teams$W[teams$Year == years[i]])
}
plot(years, minPlayoff, cex=0.3, col="blue", ylim=c(0, 82))
lines(years, minPlayoff, col="blue")
points(years, maxWins, cex=0.3, col="red")
lines(years, maxWins, col="red")
points(years, minWins, cex=0.3)
lines(years, minWins)
grid()
years <- 1979:2019
minPlayoff <- rep(0, length(years))
maxWins <- rep(0, length(years))
minWins <- rep(0, length(years))
for (i in 1:length(years)) {
minPlayoff[i] <- min(teams$W[teams$Year == years[i] & teams$PO])
maxWins[i] <- max(teams$W[teams$Year == years[i]])
minWins[i] <- min(teams$W[teams$Year == years[i]])
}
plot(years, minPlayoff, cex=0.3, col="blue", ylim=c(0, 82))
lines(years, minPlayoff, col="blue")
points(years, maxWins, cex=0.3, col="red")
lines(years, maxWins, col="red")
points(years, minWins, cex=0.3)
lines(years, minWins)
grid()
isWestern <- function(abbr) {
if (length(abbr) == 1) {
return(as.character(teamData[as.character(abbr) == as.character(teamData$Abbr), ]$Conf) == "W")
}
isWesternV <- rep(FALSE, length(abbr))
for (i in 1:length(abbr)) {
isWesternV[i] <- isWestern(abbr[i])
}
return(isWesternV)
}
tms <- teams[teams$Year >= 1979, ]
western <- isWestern(tms$Tm)
tms <- cbind(tms, western)
years <- 1979:2019
minPlayoffWest <- rep(0, length(years))
minPlayoffEast <- rep(0, length(years))
for (i in 1:length(years)) {
minPlayoffWest[i] <- min(tms$W[tms$Year == years[i] & tms$western & tms$PO])
minPlayoffEast[i] <- min(tms$W[tms$Year == years[i] & !tms$western & tms$PO])
}
plot(years, minPlayoffWest, cex=0.3, col="red")
grid()
lines(years, minPlayoffWest, col="red")
points(years, minPlayoffEast, cex=0.3, col="blue")
lines(years, minPlayoffEast, col="blue")
t.test(minPlayoffEast, minPlayoffWest, alternative="less")
diff <- minPlayoffWest - minPlayoffEast
plot(years, diff, cex=0.3, xlab="Godina", ylab="Razlika")
lines(c(0, 10000), c(0, 0), lty="43")
lines(years, diff)
for(i in 1:length(diff)) {
current <- diff[i]
if (current > 0)  {
points(years[i], diff[i], cex=0.4, col="red")
points(years[i], diff[i], cex=0.2, col="red")
} else if (current < 0) {
points(years[i], diff[i], cex=0.2, col="blue")
points(years[i], diff[i], cex=0.4, col="blue")
}
}
winsWest <- rep(0, length(years))
winsEast <- rep(0, length(years))
for (i in 1:length(years)) {
winsEast[i] <- sum(tms$W[tms$Year == years[i] & !tms$western])
winsWest[i] <- sum(tms$W[tms$Year == years[i] & tms$western])
}
plot(years, winsWest, cex=0.3, col="red")
grid()
lines(years, winsWest, col="red")
points(years, winsEast, cex=0.3, col="blue")
lines(years, winsEast, col="blue")
diff <- winsWest - winsEast
plot(years, diff, cex=0.3, xlab="Godina", ylab="Razlika")
lines(c(0, 10000), c(0, 0), lty="43")
lines(years, diff)
for(i in 1:length(diff)) {
current <- diff[i]
if (current > 0)  {
points(years[i], diff[i], cex=0.4, col="red")
points(years[i], diff[i], cex=0.2, col="red")
} else if (current < 0) {
points(years[i], diff[i], cex=0.2, col="blue")
points(years[i], diff[i], cex=0.4, col="blue")
}
}
# Broj pobjeda / Ulazak u doigravanje
ta <- teams[teams$Year >= 1979, ]
po <- rep(0, length(ta$PO))
for (i in 1:length(ta$PO)) {
if (ta$PO[i]) {
po[i] <- 1
}
}
myData <- data.frame(cbind(ta$W, po))
names(myData) <- c("Wins", "PO")
logreg <- glm(PO ~ Wins, data=myData, family=binomial())
summary(logreg)
xWins <- seq(1, 82, 0.5)
prediction <- predict(logreg, data.frame(Wins=xWins), type="response")
plot(ta$W, po, cex=0.2, xlab="Wins", ylab="PO", col="blue")
lines(xWins, prediction, cex=0.1, col="red")
print("Value for 48 wins:")
print(predict(logreg, data.frame(Wins=c(48)), type="response")[[1]])
# Broj pobjeda / Ulazak u doigravanje
ta <- teams[teams$Year >= 1979, ]
po <- rep(0, length(ta$PO))
for (i in 1:length(ta$PO)) {
if (ta$PO[i]) {
po[i] <- 1
}
}
myData <- data.frame(cbind(ta$W, po))
names(myData) <- c("Wins", "PO")
logreg <- glm(PO ~ Wins, data=myData, family=binomial())
xWins <- seq(1, 82, 0.5)
prediction <- predict(logreg, data.frame(Wins=xWins), type="response")
plot(ta$W, po, cex=0.2, xlab="Wins", ylab="PO", col="blue")
lines(xWins, prediction, cex=0.1, col="red")
summary(logreg)
print("Value for 48 wins:")
print(predict(logreg, data.frame(Wins=c(48)), type="response")[[1]])
# Broj pobjeda / Ulazak u doigravanje
ta <- teams[teams$Year >= 1979, ]
po <- rep(0, length(ta$PO))
for (i in 1:length(ta$PO)) {
if (ta$PO[i]) {
po[i] <- 1
}
}
myData <- data.frame(cbind(ta$W, po))
names(myData) <- c("Wins", "PO")
logreg <- glm(PO ~ Wins, data=myData, family=binomial())
xWins <- seq(1, 82, 0.5)
prediction <- predict(logreg, data.frame(Wins=xWins), type="response")
plot(ta$W, po, cex=0.2, xlab="Wins", ylab="PO", col="blue")
lines(xWins, prediction, cex=0.1, col="red")
summary(logreg)
print("Value for 48 wins:")
print(predict(logreg, data.frame(Wins=c(48)), type="response")[[1]])
# Broj pobjeda / Ulazak u doigravanje
ta <- teams[teams$Year >= 1979, ]
po <- rep(0, length(ta$PO))
for (i in 1:length(ta$PO)) {
if (ta$PO[i]) {
po[i] <- 1
}
}
myData <- data.frame(cbind(ta$W, po))
names(myData) <- c("Wins", "PO")
logreg <- glm(PO ~ Wins, data=myData, family=binomial())
xWins <- seq(1, 82, 0.5)
prediction <- predict(logreg, data.frame(Wins=xWins), type="response")
plot(ta$W, po, cex=0.2, xlab="Wins", ylab="PO", col="blue")
lines(xWins, prediction, cex=0.1, col="red")
summary(logreg)
print("Value for 48 wins:")
print(predict(logreg, data.frame(Wins=c(48)), type="response")[[1]])
head(playerSeasons)
ids = unique(playerSeasons$ID)
ids
sameNamePlayers
names = unique(playerSeasons$name[playerSeasons$name %in% sameNamePlayers$name])
names
playerSeasons
names = unique(playerSeasons$name[!(playerSeasons$Player %in% sameNamePlayers$name)])
names
sameNamePlayers$name
"Dan Anderson" %in% sameNamePlayers$name
!(playerSeasons$Player %in% sameNamePlayers$name)
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name)])
names
players
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights = rep(0, length(names))
fgs = rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[players$name == names[i]]
fgs = sum(ps$FG[ps$Player == names[i]]) / sum(ps$FGA[ps$Player == names[i]])
}
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights = rep(0, length(names))
fgs = rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.characters(players$name) == names[i]]
fgs = sum(ps$FG[ps$Player == names[i]]) / sum(ps$FGA[ps$Player == names[i]])
}
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights = rep(0, length(names))
fgs = rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs = sum(ps$FG[ps$Player == names[i]]) / sum(ps$FGA[ps$Player == names[i]])
}
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights = rep(0, length(names))
fgs = rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs = sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights = rep(0, length(names))
fgs = rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs = sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs = sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights = rep(0, length(names))
fgs = rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs = sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights = rep(0, length(names))
fgs = rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs = sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
#plot(heights, fgs)
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights = rep(0, length(names))
fgs = rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs = sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
plot(heights, fgs)
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights <- rep(0, length(names))
fgs <- rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FG) & !is.na(playerSeasons$FGA), ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs[i] <- sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
plot(heights, fgs)
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights <- rep(0, length(names))
fgs <- rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$X3P) & !is.na(playerSeasons$X3PA) & playerSeasons$X3PA > 50, ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs[i] <- sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights <- rep(0, length(names))
fgs <- rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$X3P) & !is.na(playerSeasons$X3PA) & playerSeasons$X3PA > 50, ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
fgs[i] <- sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
plot(heights, fgs, cex=0.2)
cor(heights, fgs, method="pearson")
heights()
heights
heights[is.na(heights)]
fgs[is.na(fgs)]
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights <- rep(0, length(names))
fgs <- rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$X3P) & !is.na(playerSeasons$X3PA) & playerSeasons$X3PA > 50, ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
trps[i] <- sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights <- rep(0, length(names))
trps <- rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$X3P) & !is.na(playerSeasons$X3PA) & playerSeasons$X3PA > 50, ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
trps[i] <- sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
plot(heights, trps, cex=0.2)
trpss[is.na(trps)]
trps[is.na(trps)]
trps[is.na(trps)]
heights <- heights[!is.na(trps)]
trps <- trps[!is.na(trps)]
plot(heights, trps, cex=0.2)
cor(heights, trps, method="pearson")
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights <- rep(0, length(names))
trps <- rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$FT) & !is.na(playerSeasons$FTA) & playerSeasons$FTA > 50, ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
trps[i] <- sum(ps$FT[ps$Player == names[i]]) / sum(ps$FTA[ps$Player == names[i]])
}
heights <- heights[!is.na(trps)]
trps <- trps[!is.na(trps)]
plot(heights, trps, cex=0.2)
cor(heights, trps, method="pearson")
names = unique(playerSeasons$Player[!(playerSeasons$Player %in% sameNamePlayers$name) & playerSeasons$Player %in% players$name])
heights <- rep(0, length(names))
trps <- rep(0, length(names))
ps <- playerSeasons[!is.na(playerSeasons$X3P) & !is.na(playerSeasons$X3PA) & playerSeasons$FTA > 50, ]
for (i in 1:length(names)) {
heights[i] <- players$height[as.character(players$name) == names[i]]
trps[i] <- sum(ps$X3P[ps$Player == names[i]]) / sum(ps$X3PA[ps$Player == names[i]])
}
heights <- heights[!is.na(trps)]
trps <- trps[!is.na(trps)]
plot(heights, trps, cex=0.2)
cor(heights, trps, method="pearson")
