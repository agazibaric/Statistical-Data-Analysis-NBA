aggregate(irisdata[, 3], list(irisdata$Species), mean,trim=0.15)
# histogram duljine lapa s cca. 20-30 razreda (broj razreda shvaca kao "sugestiju")
hist(irisdata$Sepal.Length,breaks=25,main='Sepal length histogram',
xlab='Sepal length [cm]',ylab='Frequency')
# histogram s prikazom relativnih frekvencija
h = hist(irisdata$Sepal.Length,prob=TRUE,breaks=15,main='Sepal length histogram',
xlab='Sepal length [cm]',ylab='Relative frequency')
# pravokutni dijagram duljine lapa, s postavljenim naslovom i oznakom na y osi
boxplot(irisdata$Sepal.Length,main='Sepal length box-plot',ylab='Sepal length [cm]')
# vrijednosti pravokutnog dijagrama dolaze iz deskriptivne statistike
summary(irisdata$Sepal.Length)
# pravokutni dijagram duljina i sirina latica
boxplot(irisdata[-c(1, 2, 5)])
summary(irisdata[-c(1, 2, 5)])
# dijagram rasprsenja duljine i sirine lapa, s postavljenim oznakama na x i y osima
plot(irisdata$Sepal.Length,irisdata$Sepal.Width,
xlab='Sepal length [cm]',ylab='Sepal width [cm]')
# dijagram rasprsenja duljine i sirine lapa s razlicitim bojama za dvije vrste irisa
plot(irisdata$Sepal.Length[irisdata$Species=='setosa'],
irisdata$Sepal.Width[irisdata$Species=='setosa'],col='blue',
xlim=c(min(irisdata$Sepal.Length),max(irisdata$Sepal.Length)),
ylim=c(min(irisdata$Sepal.Width),max(irisdata$Sepal.Width)),
xlab='Sepal length [cm]',ylab='Sepal width [cm]')
points(irisdata$Sepal.Length[irisdata$Species=='versicolor'],
irisdata$Sepal.Width[irisdata$Species=='versicolor'],col='red')
install.packages("tidyverse")
source("util.r")
players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
players <- preparePlayerData(players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
ss <- seasonsStats
pl <- players
years <- 1979:max(ss$Year, na.rm=TRUE)
values <- rep(0, length(years))
for (i in 1:length(years)) {
values[i] <- sum(ss$X3PA[ss$Year == years[i] & !is.na(ss$X3PA)])
}
lm.r <- lm(values ~ years)
plot(years, values, cex=0.5, xlab="Year", ylab="3PA")
abline(lm.r, col="red")
qqline(rstandard(lm.r))
qqnorm(rstandard(lm.r))
qqline(rstandard(lm.r))
qqnorm(rstandard(lm.r))
qqline(rstandard(lm.r))
plot(seasonsStats$X3P., seasonsStats$X3PA, cex=0.1, xlab="3P%", ylab="3PA")
plot(seasonsStats$X3P., seasonsStats$X3PA, cex=0.1, xlab="3P%", ylab="3PA")
plot(seasonsStats$X3P.[seasonsStats$X3PA > 100], seasonsStats$X3PA[seasonsStats$X3PA > 100], cex=0.1, xlab="3P%", ylab="3PA")
plot(seasonsStats$X3P., seasonsStats$X3PA, cex=0.1, xlab="3P%", ylab="3PA")
t
#ss[which(ss$FTA == max(ss$FTA[!is.na(ss$FTA)])), c("Player", "Year", "X3PA", "X3P")]
plot(seasonsStats$FT., seasonsStats$FTA, cex=0.1, xlab="FT%", ylab="FTA")
plot(ss[ss$FTA > 50 & ss$X3PA > 50, c("FT.")], ss[ss$FTA > 50 & ss$X3PA > 50, c("X3P.")], cex=0.1, xlab="FT%", ylab="3P%")
plot(ss[ss$FTA > 50 & ss$X3PA > 50, c("X3P.")], ss[ss$FTA > 50 & ss$X3PA > 50, c("FT.")], cex=0.1, xlab="3P%", ylab="FT%")
plot(seasonsStats$X3P., seasonsStats$X3PA, cex=0.1, xlab="3P%", ylab="3PA")
threePercentages <- ss[ss$FTA > 50 & ss$X3PA > 50, c("X3P.")]
freeThrowPercentages <- ss[ss$FTA > 50 & ss$X3PA > 50, c("FT.")]
lm.r <- lm(threePercentages ~ freeThrowPercentages)
plot(threePercentages, freeThrowPercentages, cex=0.1, xlab="3P%", ylab="FT%")
abline(lm.r, color="red")
plot(threePercentages, freeThrowPercentages, cex=0.1, xlab="3P%", ylab="FT%")
abline(lm.r, col="red")
threePercentages <- ss[ss$FTA > 50 & ss$X3PA > 50, c("X3P.")]
freeThrowPercentages <- ss[ss$FTA > 50 & ss$X3PA > 50, c("FT.")]
lm.r <- lm(threePercentages ~ freeThrowPercentages)
lm.r <- lm(freeThrowPercentages ~ threePercentages)
plot(threePercentages, freeThrowPercentages, cex=0.1, xlab="3P%", ylab="FT%")
abline(lm.r, col="red")
qqnorm(rstandard(lm.r))
qqline(rstandard(lm.r))
ss
ssWithHeight <- data.frame(matrix(ncol=length(names(ss)), nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s$Player
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[pl$name == name]
ssWithHeight <- rbind(ss, c(s, player$height))
}
for (s in ss) {
names(s)
name <- s$Player
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[pl$name == name]
ssWithHeight <- rbind(ss, c(s, player$height))
}
for (s in ss) {
print(names(s))
name <- s$Player
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[pl$name == name]
ssWithHeight <- rbind(ss, c(s, player$height))
}
ss
ss[0]
ss[1]
ss[2]
ss[3]
players
players[3]
players[2]
players[5]
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[pl$name == name]
ssWithHeight <- rbind(ss, c(s, player[5]))
}
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[pl$name == name]
ssWithHeight <- rbind(ss, c(s, player$height))
}
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name]
ssWithHeight <- rbind(ss, c(s, player$height))
}
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
ssWithHeight <- rbind(ss, c(s, player$height))
}
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
ssWithHeight <- rbind(ss, c(s, player$height))
}
ssWithHeight
names(ssWithHeight)
names(ssWithHeight)
c(names(ss), "height")
names(ssWithHeight)
names(ssWithHeight)
names(ssWithHeight) <- c(names(ss), "height")
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
names(ssWithHeight)
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
ssWithHeight <- rbind(ssWithHeight, c(s, player$height))
}
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
ssWithHeight <- rbind(ssWithHeight, c(s, player$height))
}
ssWithHeight
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
player
break
ssWithHeight <- rbind(ssWithHeight, c(s, player$height))
}
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
print(player)
break
ssWithHeight <- rbind(ssWithHeight, c(s, player$height))
}
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
name <- s[3]
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
ssWithHeight <- rbind(ssWithHeight, data.frame(c(s, height=player$height)))
}
ssWithHeight
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
names(s) <- names(ss)
name <- s$Player
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
ssWithHeight <- rbind(ssWithHeight, data.frame(c(s, height=player$height[1])))
}
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
s <- data.frame(setNames(s, names(ss)))
name <- s$Player
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
ssWithHeight <- rbind(ssWithHeight, data.frame(c(s, height=player$height[1])))
}
ssWithHeight <- data.frame(matrix(ncol=length(names(ss))+1, nrow=0))
names(ssWithHeight) <- c(names(ss), "height")
for (s in ss) {
s <- data.frame(setNames(s, names(ss)))
print(s)
break
name <- s$Player
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (name %in% sameNamePlayers$name) {
next
}
player <- pl[as.character(pl$name) == name, ]
ssWithHeight <- rbind(ssWithHeight, data.frame(c(s, height=player$height[1])))
}
players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
players <- preparePlayerData(players)
players <- preparePlayerData(players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
ss <- seasonsStats
ss <- seasonsStats
pl <- players
# Tallest and smallest players
q = quantile(playersData$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(playersData$height, na.rm = TRUE)
players <- preparePlayerData(players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
ss <- seasonsStats
pl <- players
# Tallest and smallest players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(players$height, na.rm = TRUE)
upperLimit = q[3] + 1.5 * i
lowerLimit = q[1] - 1.5 * i
tallPlayers = players[players$height > upperLimit, ]
shortPlayers = players[players$height < lowerLimit, ]
tallPlayers
# Tallest and smallest players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
q
head(players)
source("util.r")
players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
players <- preparePlayerData(players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
ss <- seasonsStats
pl <- players
head(players)
head(players)
# Tallest and smallest players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(players$height, na.rm = TRUE)
q
upperLimit = q[3] + 1.5 * i
lowerLimit = q[1] - 1.5 * i
tallPlayers = players[players$height > upperLimit, ]
shortPlayers = players[players$height < lowerLimit, ]
tallPlayers
player_data <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
# Compare guards ("G") and forward guards ("F-G")
guards = player_data[player_data$position == "G" , ]
fguards = player_data[player_data$position == "F-G" | player_data$position == "G-F", ]
fromFactorToInch <- Vectorize(function(height) {
tokens <- as.numeric(unlist(strsplit(as.character(height), "-")))
return(12 * tokens[1] + tokens[2])
})
t.test(fromFactorToInch(guards$height), fromFactorToInch(fguards$height), alt = "two.sided", var.equal = TRUE)
# Compare guards ("G") and forward guards ("F-G")
guards = player_data[player_data$position == "G" , ]
guards
player_data <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
# Compare guards ("G") and forward guards ("F-G")
guards = player_data[player_data$position == "G" , ]
guards
player_data <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
head(player_data)
player_data <- read.csv(file="data/players.csv", header=TRUE, sep=",")
# Compare guards ("G") and forward guards ("F-G")
guards = player_data[player_data$position == "G" , ]
guards
# Compare guards ("G") and forward guards ("F-G")
guards = player_data[players$position == "G" , ]
fguards = player_data[players$position == "F-G" | players$position == "G-F", ]
fromFactorToInch <- Vectorize(function(height) {
tokens <- as.numeric(unlist(strsplit(as.character(height), "-")))
return(12 * tokens[1] + tokens[2])
})
t.test(fromFactorToInch(guards$height), fromFactorToInch(fguards$height), alt = "two.sided", var.equal = TRUE)
# Statistics between European players and other
europeans = playersData[player$birth_state %in% europeanCountries$name, ]
# Statistics between European players and other
europeans = players[players$birth_state %in% europeanCountries$name, ]
europeanCountries <- read.csv(file="data/Countries-Europe.csv", header=TRUE, sep=",")
head(europeanCountries)
# Statistics between European players and other
europeans = players[players$birth_state %in% europeanCountries$name, ]
europeans
players2 <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
players2
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
europeans
other = setdiff(players, europeans)
t.test(europeans$height, other$height, alt = "two.sided")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
playerFTA
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFTA
other = setdiff(players, europeans)
other
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
otherStats
head(other)
otherStats = seasonsStats[seasonsStats$Player %in% other$name, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$name, ]
otherStats
head(seasonsStats)
seasonsStats
seasonsStats
otherStats = seasonsStats[seasonsStats$Player %in% other$name, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
other = setdiff(players2, europeans)
t.test(europeans$height, other$height, alt = "two.sided")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
names <- unique(players$name)
counts <- rep(0, length(names))
sameNamePlayers <- data.frame(matrix(ncol=length(names(players)), nrow=0))
names(sameNamePlayers) <- names(players)
for (i in 1:length(names)) {
counts[i] <- length(players$name[players$name == names[i]])
if (counts[i] > 1) {
if (names[i] %in% sameNamePlayers$name) {
next
}
sameNamePlayers <- rbind(sameNamePlayers, players[players$name == names[i], ])
}
}
for (i in 1:length(names)) {
counts[i] <- length(players$name[players$name == names[i]])
if (counts[i] > 1) {
if (names[i] %in% sameNamePlayers$name) {
next
}
sameNamePlayers <- rbind(sameNamePlayers, players[players$name == names[i], ])
}
}
df = data.frame(matrix(ncol=length(names(ss)), nrow=0))
names(df) <- names(ss)
for (name in unique(sameNamePlayers$name)) {
nss <- ss[ss$Player == name, ]
maxCurrent <- nss[nss$PTS / nss$G == max(nss$PTS / nss$G, na.rm=TRUE), ]
df <- rbind(df, maxCurrent)
}
df$ppg <- df$PTS / df$G
df[ , c("Player", "G", "Year", "ppg")]
ss[ss$Player == "", ]
newNames <- vector()
for (name in seasonsStats$Player) {
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (!(name %in% players$name)) {
newNames <- c(newNames, name)
}
}
unique(newNames)
sameNamePlayers[ , c("name", "birth_date")]
age <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
values[i] <- length(seasonsStats[seasonsStats$Age == age, c("Age")])
}
barplot(setNames(values, ages))
plot(seasonsStats$X3P., seasonsStats$X3PA, cex=0.1, xlab="3P%", ylab="3PA")
plot(seasonsStats$X3P.[seasonsStats$X3PA > 100], seasonsStats$X3PA[seasonsStats$X3PA > 100], cex=0.1, xlab="3P%", ylab="3PA")
years <- 1979:max(ss$Year, na.rm=TRUE)
values <- rep(0, length(years))
for (i in 1:length(years)) {
values[i] <- sum(ss$X3PA[ss$Year == years[i] & !is.na(ss$X3PA)])
}
lm.r <- lm(values ~ years)
plot(years, values, cex=0.5, xlab="Year", ylab="3PA")
abline(lm.r, col="red")
qqnorm(rstandard(lm.r))
qqline(rstandard(lm.r))
qqnorm(rstandard(lm.r))
qqline(rstandard(lm.r))
plot(years, values, cex=0.5, xlab="Year", ylab="3PA")
abline(lm.r, col="red")
seasons <- read.csv(file="data/seasons.csv", header=TRUE, sep=",")
seasons
seasons
seasons$Tm <- as.character(seasons$Tm)
seasons$Tm <- as.character(seasons$Tm)
season$Tm <- removeAsterisk(seasons$Tm)
seasons$Tm <- as.character(seasons$Tm)
seasons$Tm <- removeAsterisk(seasons$Tm)
seasons
seasons
nrow(seasons)
plot(seasonsStats$X3P., seasonsStats$X3PA, cex=0.1, xlab="3P%", ylab="3PA")
plot(years, values, cex=0.5, xlab="Year", ylab="3PA")
abline(lm.r, col="red")
