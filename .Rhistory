players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
players2 <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
europeanCountries <- read.csv(file="data/Countries-Europe.csv", header=TRUE, sep=",")
europeanCountries <- read.csv(file="data/Countries-Europe.csv", header=TRUE, sep=",")
seasons <- read.csv(file="data/seasons.csv", header=TRUE, sep=",")
seasons$Tm <- removeAsterisk(seasons$Tm)
seasons
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
source("util.r")
players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
players2 <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
seasons <- read.csv(file="data/seasons.csv", header=TRUE, sep=",")
seasons$Tm <- as.character(seasons$Tm)
seasons$Tm <- removeAsterisk(seasons$Tm)
seasons
seasons
players <- preparePlayerData(players)
seasons
players <- preparePlayerData(players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
pl <- players
# Tallest and smallest players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(players$height, na.rm = TRUE)
upperLimit = q[3] + 1.5 * i
tallPlayers = players[players$height > upperLimit, ]
shortPlayers = players[players$height < lowerLimit, ]
tallPlayers = players[players$height > upperLimit, ]
shortPlayers = players[players$height < lowerLimit, ]
lowerLimit = q[1] - 1.5 * i
shortPlayers = players[players$height < lowerLimit, ]
shortPlayers
players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
players2 <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
seasons <- read.csv(file="data/seasons.csv", header=TRUE, sep=",")
players <- preparePlayerData(players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
ss <- seasonsStats
pl <- players
# Tallest and smallest players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(players$height, na.rm = TRUE)
upperLimit = q[3] + 1.5 * i
upperLimit
tallPlayers = players[players$height > upperLimit, ]
tallPlayers
lowerLimit = q[1] - 1.5 * i
shortPlayers = players[players$height < lowerLimit, ]
shortPlayers
# Compare guards ("G") and forward guards ("F-G")
guards = player_data[players$position == "G" , ]
fguards = player_data[players$position == "F-G" | players$position == "G-F", ]
# Compare guards ("G") and forward guards ("F-G")
guards = players2[players2$position == "G" , ]
guards
players2
# Compare guards ("G") and forward guards ("F-G")
guards = players2[players2$position == "G" , ]
guards
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
guards
players
guards
fguards = players[players$position == "F-G" | players$position == "G-F", ]
fromFactorToInch <- Vectorize(function(height) {
tokens <- as.numeric(unlist(strsplit(as.character(height), "-")))
return(12 * tokens[1] + tokens[2])
})
t.test(fromFactorToInch(guards$height), fromFactorToInch(fguards$height), alt = "two.sided", var.equal = TRUE)
fguards = players[players$position == "F-G" | players$position == "G-F", ]
fguards
head(players)
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
t.test(fromFactorToInch(guards$height), fromFactorToInch(fguards$height), alt = "two.sided", var.equal = TRUE)
head(players)
t.test(guards$height, fguards$height, alt = "two.sided", var.equal = TRUE)
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
europeans
help(t.test)
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
t.test(guards$height, fguards$height, alt = "greater", var.equal = TRUE)
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
other = setdiff(players2, europeans)
t.test(europeans$height, other$height, alt = "two.sided")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
source("util.r")
players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
players2 <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
europeanCountries <- read.csv(file="data/Countries-Europe.csv", header=TRUE, sep=",")
seasons <- read.csv(file="data/seasons.csv", header=TRUE, sep=",")
seasons <- read.csv(file="data/seasons.csv", header=TRUE, sep=",")
seasons$Tm <- as.character(seasons$Tm)
seasons$Tm <- removeAsterisk(seasons$Tm)
players <- preparePlayerData(players)
players <- preparePlayerData(players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
players <- preparePlayerData(players)
seasonsStats <- prepareSeasonsStatsData(seasonsStats, players)
ss <- seasonsStats
ss <- seasonsStats
pl <- players
# Tallest and smallest players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(players$height, na.rm = TRUE)
upperLimit = q[3] + 1.5 * i
lowerLimit = q[1] - 1.5 * i
tallPlayers = players[players$height > upperLimit, ]
shortPlayers = players[players$height < lowerLimit, ]
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
guards
players
players
players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
players <- preparePlayerData(players)
players
q = quantile(players$height, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
i = IQR(players$height, na.rm = TRUE)
upperLimit = q[3] + 1.5 * i
lowerLimit = q[1] - 1.5 * i
tallPlayers = players[players$height > upperLimit, ]
shortPlayers = players[players$height < lowerLimit, ]
players
# Compare guards ("G") and forward guards ("F-G")
guards = players[players$position == "G" , ]
fguards = players[players$position == "F-G" | players$position == "G-F", ]
players
guards
t.test(guards$height, fguards$height, alt = "less", var.equal = TRUE)
# Statistics between European players and other
europeans = players2[players2$birth_state %in% europeanCountries$name, ]
other = setdiff(players2, europeans)
t.test(europeans$height, other$height, alt = "two.sided")
europeanStats = seasonsStats[seasonsStats$Player %in% europeans$Player, ]
otherStats = seasonsStats[seasonsStats$Player %in% other$Player, ]
playerFTA = c(sum(europeanStats$FTA), sum(otherStats$FTA))
playerFT = c(sum(europeanStats$FT), sum(otherStats$FT))
prop.test(playerFT, playerFTA, alternative="t", correct="FALSE")
names <- unique(players$name)
counts <- rep(0, length(names))
sameNamePlayers <- data.frame(matrix(ncol=length(names(players)), nrow=0))
names(sameNamePlayers) <- names(players)
for (i in 1:length(names)) {
counts[i] <- length(players$name[players$name == names[i]])
if (counts[i] > 1) {
if (names[i] %in% sameNamePlayers$name) {
next
}
sameNamePlayers <- rbind(sameNamePlayers, players[players$name == names[i], ])
}
}
for (i in 1:length(names)) {
counts[i] <- length(players$name[players$name == names[i]])
if (counts[i] > 1) {
if (names[i] %in% sameNamePlayers$name) {
next
}
sameNamePlayers <- rbind(sameNamePlayers, players[players$name == names[i], ])
}
}
df = data.frame(matrix(ncol=length(names(ss)), nrow=0))
names(df) <- names(ss)
for (name in unique(sameNamePlayers$name)) {
nss <- ss[ss$Player == name, ]
maxCurrent <- nss[nss$PTS / nss$G == max(nss$PTS / nss$G, na.rm=TRUE), ]
df <- rbind(df, maxCurrent)
}
df$ppg <- df$PTS / df$G
df[ , c("Player", "G", "Year", "ppg")]
ss[ss$Player == "", ]
newNames <- vector()
for (name in seasonsStats$Player) {
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (!(name %in% players$name)) {
newNames <- c(newNames, name)
}
}
unique(newNames)
unique(newNames)
sameNamePlayers[ , c("name", "birth_date")]
age <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
values[i] <- length(seasonsStats[seasonsStats$Age == age, c("Age")])
}
age <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
age
values <- rep(0, length(ages))
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
values[i] <- length(seasonsStats[seasonsStats$Age == age, c("Age")])
}
barplot(setNames(values, ages))
plot(seasonsStats$X3P., seasonsStats$X3PA, cex=0.1, xlab="3P%", ylab="3PA")
plot(seasonsStats$X3P.[seasonsStats$X3PA > 100], seasonsStats$X3PA[seasonsStats$X3PA > 100], cex=0.1, xlab="3P%", ylab="3PA")
years <- 1979:max(ss$Year, na.rm=TRUE)
values <- rep(0, length(years))
for (i in 1:length(years)) {
values[i] <- sum(ss$X3PA[ss$Year == years[i] & !is.na(ss$X3PA)])
}
lm.r <- lm(values ~ years)
plot(years, values, cex=0.5, xlab="Year", ylab="3PA")
abline(lm.r, col="red")
qqnorm(rstandard(lm.r))
qqline(rstandard(lm.r))
#ss[which(ss$FTA == max(ss$FTA[!is.na(ss$FTA)])), c("Player", "Year", "X3PA", "X3P")]
plot(seasonsStats$FT., seasonsStats$FTA, cex=0.1, xlab="FT%", ylab="FTA")
barplot(prop.table(table(players$position)))
plot(years, values, cex=0.5, xlab="Year", ylab="3PA")
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
values[i] <- length(seasonsStats[seasonsStats$Age == age, c("Age")])
}
barplot(setNames(values, ages))
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
values[i] <- length(seasonsStats[seasonsStats$Age == age, c("Age")])
}
values
seasonsStats
ats$Age, na.rm=TRUE)
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
print(seasonsStats[seasonsStats$Age == age, c("Age")])
values[i] <- length(seasonsStats[seasonsStats$Age == age, c("Age")])
}
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
print(seasonsStats[seasonsStats$Age == age, c("Age")])
values[i] <- length(seasonsStats[seasonsStats$Age == age & !is.na(seasonsStats[seasonsStats$Age]), c("Age")])
}
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
print(seasonsStats[seasonsStats$Age == age, c("Age")])
values[i] <- length(seasonsStats[seasonsStats$Age == age & !is.na(seasonsStats$Age), c("Age")])
}
values
ages
values
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
values
print(seasonsStats[seasonsStats$Age == age, c("Age")])
values[i] <- length(seasonsStats[!is.na(seasonsStats$Age) & seasonsStats$Age == age, c("Age")])
}
for (age in ages) {
print(seasonsStats[seasonsStats$Age == age, c("Age")])
values[i] <- length(seasonsStats[!is.na(seasonsStats$Age) & seasonsStats$Age == age, c("Age")])
}
values
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (age in ages) {
values[i] <- length(seasonsStats[!is.na(seasonsStats$Age) & seasonsStats$Age == age, ])
}
values
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (i in 1:length(ages)) {
age = age[i]
values[i] <- length(seasonsStats[!is.na(seasonsStats$Age) & seasonsStats$Age == age, c("Age")])
}
values
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (i in 1:length(ages)) {
age = age[i]
values[i] <- length(seasonsStats[!is.na(seasonsStats$Age) & seasonsStats$Age == age, ])
}
values
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (i in 1:length(ages)) {
age = age[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age, ])
}
values
for (i in 1:length(ages)) {
age = age[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age, ])
}
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (i in 1:length(ages)) {
age = age[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age])
}
values
barplot(setNames(values, ages))
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (i in 1:length(ages)) {
age = ages[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age])
}
values
barplot(setNames(values, ages))
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (i in 1:length(ages)) {
age = ages[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age & ss$Year == 2017])
}
barplot(setNames(values, ages))
for (i in 1:length(ages)) {
age = ages[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age & ss$Year == 2016])
}
barplot(setNames(values, ages))
for (i in 1:length(ages)) {
age = ages[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age/* & ss$Year == 2016*/])
```{r}
ages <- min(seasonsStats$Age, na.rm=TRUE):max(seasonsStats$Age, na.rm=TRUE)
values <- rep(0, length(ages))
for (i in 1:length(ages)) {
age = ages[i]
values[i] <- length(seasonsStats$Age[!is.na(seasonsStats$Age) & seasonsStats$Age == age])
}
values <- values / length(unique(ss$Year))
barplot(setNames(values, ages))
ss[ss$Player == "", ]
newNames <- vector()
for (name in seasonsStats$Player) {
if (grepl("\\*", name)) {
name <- substr(name, 1, nchar(name)-1)
}
if (!(name %in% players$name)) {
newNames <- c(newNames, name)
}
}
unique(newNames)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
info
teams <- read.csv(file="data/seasons.csv", header=TRUE, sep=",")
teams
source("util.r")
#source("util.r")
players <- read.csv(file="data/players.csv", header=TRUE, sep=",")
players2 <- read.csv(file="data/players2.csv", header=TRUE, sep=",")
teams <- read.csv(file="data/seasons.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
seasonsStats <- read.csv(file="data/seasons_stats.csv", header=TRUE, sep=",")
